{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","utils/enums.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onShowClicked","selectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","onSelect","sortType","onInput","query","value","onChange","event","target","placeholder","style","pointerEvents","length","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortType","Loader","TodoModal","setIsClicked","setSelectedId","useState","selectedUser","setSelectedUser","isLoaded","setIsLoaded","useEffect","userId","user","isTodo","href","email","name","App","loadedTodos","setLoadedTodos","isClicked","selectedUserId","setSelectedUserId","all","setSortType","setQuery","find","filter","doesQueryMatch","toLowerCase","includes","active","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6bde1f4.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onShowClicked: (id: number) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onShowClicked,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          key={todo.id}\n          className={classNames(\n            {\n              'has-background-info-light': todo.id === selectedTodo?.id,\n            },\n          )}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames(\n              {\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              },\n            )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onShowClicked(todo.id)}\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  'far',\n                  {\n                    'fa-eye-slash': todo.id === selectedTodo?.id,\n                    'fa-eye': todo.id !== selectedTodo?.id,\n                  },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { SortType } from '../../utils/enums';\n\ntype Props = {\n  onSelect: (sortType: SortType) => void;\n  sortType: SortType;\n  onInput: (query: string) => void;\n  query: string;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onSelect,\n  sortType,\n  onInput,\n  query,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          value={sortType}\n          onChange={(event) => onSelect(event.target.value as SortType)}\n          data-cy=\"statusSelect\"\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onInput(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query.length > 0 && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onInput('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SortType {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  setIsClicked: (isSelected: boolean) => void;\n  selectedTodo: Todo | null;\n  setSelectedId: (id: number) => void\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  setIsClicked,\n  selectedTodo,\n  setSelectedId,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(user => {\n          setSelectedUser(user);\n          setIsLoaded(true);\n        });\n    }\n  }, []);\n\n  const isTodo = selectedTodo && selectedUser;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(!isLoaded ? (\n        <Loader />\n      ) : isTodo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setIsClicked(false);\n                setSelectedId(0);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={selectedUser.email}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortType } from './utils/enums';\n\nexport const App: React.FC = () => {\n  const [loadedTodos, setLoadedTodos] = useState<Todo[]>([]);\n  const [isClicked, setIsClicked] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [sortType, setSortType] = useState(SortType.all);\n  const [query, setQuery] = useState('');\n\n  const selectedTodo = loadedTodos.find(todo => todo.id === selectedUserId) || null;\n\n  useEffect(() => {\n    getTodos()\n      .then(todos => setLoadedTodos(todos.filter(todo => {\n        const { completed, title } = todo;\n\n        const doesQueryMatch = (value: string) => {\n          return value.toLowerCase().includes(query.toLowerCase());\n        };\n\n        switch (sortType) {\n          case SortType.completed:\n            return completed === true && doesQueryMatch(title);\n\n          case SortType.active:\n            return completed === false && doesQueryMatch(title);\n\n          default:\n            return doesQueryMatch(title);\n        }\n      })));\n  }, [sortType, query]);\n\n  const onShowClicked = (id: number) => {\n    setIsClicked(true);\n    setSelectedUserId(id);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSelect={setSortType}\n                sortType={sortType}\n                onInput={setQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!loadedTodos.length && <Loader />}\n              <TodoList\n                todos={loadedTodos}\n                onShowClicked={onShowClicked}\n                selectedTodo={selectedTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isClicked && (\n        <TodoModal\n          setIsClicked={setIsClicked}\n          selectedTodo={selectedTodo}\n          setSelectedId={setSelectedUserId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}